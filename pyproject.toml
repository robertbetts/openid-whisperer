[tool.poetry]
name = "openid-whisperer"
version = "0.1.0"
description = "OpenID Oauth 2.0 compatible Identity Provider"
authors = ["Robert Betts"]
readme = "README.md"
packages = [
    {include = "openid_whisperer", from = "src" },
    {include = "mock_api_service", from = "src" }
]

[tool.poetry.scripts]
openid-whisperer = 'mock_api_service.main:main'
mock-api-service = 'mock_api_service.mock_api_service:main'
mock-api-client = 'mock_api_service.mock_api_client:main'


[tool.pytest]
env_files = [".env_test"]
testpaths = ["tests"]

[tool.pytest.ini_options]
log_cli = true
log_level = "DEBUG"
log_cli_format = "%(asctime)s %(levelname)s %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "test.log"
log_file_level = "INFO"
log_file_format = "%(asctime)s %(levelname)s %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
omit = [".*", "*/site-packages/*"]
[tool.coverage.report]
fail_under = 100

[tool.mypy]
check_untyped_defs = true

[tool.pylint]
ignore-paths = "tests"

[tool.poetry.dependencies]
python = "^3.11"
pyjwt = "^2.6.0"
requests = {extras = ["security"], version = "^2.31.0"}
requests-kerberos = "^0.14.0"
beautifulsoup4 = "^4.12.0"
cryptography = "^40.0.1"
pyyaml = "^6.0"
flask = "^2.2.3"
python-dotenv = "^1.0.0"


[tool.poetry.group.dev.dependencies]
poetry = "^1.5.1"
pytest = "^7.3.1"
certifi = "^2022.12.7"
mypy = "^1.3.0"
pylint = "^2.17.4"
types-requests = "^2.31.0.1"
coverage = {extras = ["toml"], version = "^7.2.7"}
pytest-dotenv = "^0.5.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
